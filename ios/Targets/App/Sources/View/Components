import SwiftUI
import Foundation

// Modèle de données centralisé pour gérer toutes les listes de l'application
public class ListsDataStore: ObservableObject {
    // Liste des courses disponibles
    @Published public var lists: [ListItem]
    
    // Statistiques calculées
    public var totalBudget: Double {
        lists.compactMap { $0.price }.reduce(0, +)
    }
    
    public var totalItems: Int {
        lists.reduce(0) { $0 + $1.numberOfItems }
    }
    
    // Historique des achats
    @Published public var purchaseHistory: [PurchaseRecord] = []
    
    // Initialisation avec données de base ou données sauvegardées
    public init(lists: [ListItem] = sampleLists + additionalListItems) {
        self.lists = lists
        // Ici on pourrait charger des données depuis le stockage local
    }
    
    // MARK: - Méthodes pour modifier les données
    
    // Ajouter une nouvelle liste
    public func addList(_ list: ListItem) {
        lists.append(list)
    }
    
    // Supprimer une liste
    public func removeList(withId id: String) {
        lists.removeAll { $0.id == id }
    }
    
    // Mettre à jour une liste existante
    public func updateList(_ updatedList: ListItem) {
        if let index = lists.firstIndex(where: { $0.id == updatedList.id }) {
            lists[index] = updatedList
        }
    }
    
    // Ajouter un article à une liste
    public func addItemToList(listId: String, name: String, quantity: Int = 1, price: Double? = nil) {
        if let index = lists.firstIndex(where: { $0.id == listId }) {
            lists[index].numberOfItems += quantity
            if let itemPrice = price {
                lists[index].price = (lists[index].price ?? 0) + itemPrice
            }
        }
    }
    
    // Enregistrer un achat
    public func recordPurchase(listId: String, amount: Double, date: Date = Date()) {
        let record = PurchaseRecord(listId: listId, amount: amount, date: date)
        purchaseHistory.append(record)
    }
    
    // MARK: - Méthodes d'organisation des données
    
    // Trier les listes par date
    public func sortListsByDate() {
        lists.sort { $0.date > $1.date }
    }
    
    // Trier les listes par prix
    public func sortListsByPrice() {
        lists.sort { ($0.price ?? 0) > ($1.price ?? 0) }
    }
    
    // Trier les listes par ordre alphabétique
    public func sortListsAlphabetically() {
        lists.sort { $0.title < $1.title }
    }
    
    // Filtrer les listes par texte de recherche
    public func filterLists(searchText: String) -> [ListItem] {
        if searchText.isEmpty {
            return lists
        } else {
            return lists.filter { $0.title.localizedCaseInsensitiveContains(searchText) }
        }
    }
    
    // Obtenir le budget hebdomadaire moyen
    public func getWeeklyAverageBudget() -> Double {
        guard !purchaseHistory.isEmpty else { return totalBudget }
        
        let totalSpent = purchaseHistory.reduce(0) { $0 + $1.amount }
        let oldestPurchaseDate = purchaseHistory.map { $0.date }.min() ?? Date()
        let timeIntervalInWeeks = Date().timeIntervalSince(oldestPurchaseDate) / (7 * 24 * 60 * 60)
        
        // Éviter la division par zéro
        return timeIntervalInWeeks > 0 ? totalSpent / timeIntervalInWeeks : totalSpent
    }
}

// Structure pour enregistrer l'historique des achats
public struct PurchaseRecord: Identifiable {
    public let id = UUID()
    public let listId: String
    public let amount: Double
    public let date: Date
}

// Structure pour les éléments de liste
public struct ListItem: Identifiable {
    public let id: String
    public var title: String
    public var icon: String?
    public var numberOfItems: Int
    public var price: Double?
    public var date: Date
    public var color: Color
    
    public init(id: String = UUID().uuidString, title: String, icon: String? = nil, numberOfItems: Int = 0, price: Double? = nil, date: Date = Date(), color: Color = .blue) {
        self.id = id
        self.title = title
        self.icon = icon
        self.numberOfItems = numberOfItems
        self.price = price
        self.date = date
        self.color = color
    }
}

// Données d'exemple additionnelles
public let additionalListItems = [
    ListItem(title: "Courses de la semaine", icon: "cart", numberOfItems: 15, price: 62.75, color: .green),
    ListItem(title: "Soirée pizza", icon: "fork.knife", numberOfItems: 6, price: 25.30, color: .red)
]

// Échantillons de données pour les listes
public let sampleLists: [ListItem] = [
    ListItem(title: "Courses maison", icon: "house", numberOfItems: 12, price: 45.99, color: .blue),
    ListItem(title: "Courses enfants", icon: "person.2", numberOfItems: 8, price: 34.50, color: .orange)
]

// Fonction utilitaire pour accéder à toutes les listes (pour compatibilité)
public func getAllLists() -> [ListItem] {
    return sampleLists + additionalListItems
} 